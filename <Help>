class Quote < ActiveRecord::Base
  belongs_to :quotable, polymorphic: true
  belongs_to :author, class_name: "User", foreign_key: "creator_id"

  validates :text, presence: true

  scope :pending, -> { where(approved: false) }

  def self.pending_overview(user)
    if user.moderator?
      self.pending
    else
      self.pending.where(quotable: user.profile)
    end
  end

  def self.export_all(exp_class)
    require 'csv'
    csv_path = "#{Rails.root}/export/#{exp_class.to_s}.csv"

    teacher = (exp_class.to_s == "Teacher")
    questions = Question.where(teacher: teacher)
    question_array = questions.map {|q| q.title}
    question_ids = questions.map {|q| q.id}

    CSV.open(csv_path, "wb") do |csv|
      headers = ["quotable_id", "first_name", "last_name", "quotes"]
      question_array.each do |q|
        headers << q
      end
      csv << headers
      exp_class.all.each do |c|
        quotes = Quote.where(quotable: c).where("quotes.locked IS NULL OR quotes.locked = 'f'").order(quotable_id: :asc)
        puts quotes
        quote_array = quotes.map {|q| q.text}
        puts quote_array

        profile_id = (teacher ? c.profile.id : c.id)
        profile = Profile.find(profile_id)
        answers = []
        questions.each do |question, index|
          answer = Answer.find_by(question: question, profile_id: profile_id)
          if (question_ids[index] == 3 rescue false)
            answers << ("#{'%03i' % answer.id}/original/#{answer.file_file_name}" rescue "")
          end
          answers << (answer ? answer.text : "")
        end
        #answer_array = answers.map {|a| a.text}
        answer_array = answers
        row = [c.id, profile.first_name, profile.last_name, quote_array.join(" Â· ")]
        answer_array.each do |a|
          row << a
        end
        csv << row
      end
    end
  end
end
